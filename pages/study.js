export default function Study() {
  return (
    <div>
      <h1>프리렌더링 - 웹페이지 로딩 이전에 하는 렌더링</h1>

      CSR은 사이트에 접속하면 처음엔 빈 화면이 나옴 - 텅 빈 HTML 코드를 보내 주기 때문임 필요한 자바스크립트를 전부 로딩하면
      리액트가 실행되고 렌더링을 해서 제대로 된 화면이 보임

      여기서 프리렌더링은 언제 일어날까? - 처음에 브라우저가 HTML을 받아오는 시점이 시간상으로 이 시점 이전이 프리렌더링이 
      일어나는 시점임 웹 브라우저가 HTML 코드를 받아오기 이전에 렌더링 하는 거임

      프리 렌더링 2가지 방식 -  정적 생성(static generation), 서버사이드 렌더링(server-side-rendering)
      
      1. 정적 생성 (static generation) - 업데이트가 잘 안일어나는 페이지에 적합
      - 빌드를 하는 시점에 렌더링 하는 거임 , 빌드는 배포 하기전에 소스코드를 실행할 수 있는 형태로 만들어 놓는 것
      - 정적 생성은 쉽게 말해서 빌드할 때 HTML을 만드는 거임
      - 소스 코드를 빌드하면서 파일로 미리 만들어 두었다가 웹 브라우저로 접속하면 만들어 놓은걸 그대로 보여줌
      이미 렌더링된 HTML을 받는거니까 렌더링된 화면을 곧바로 보여줄 수 있음 이렇게 렌더링된 상태에서 JS 파일을 로딩하고
      리액트를 실행하면 이미 화면에 렌더링된 것들이랑 리액트랑 연결해서 다음부터는 클라이언트 사이드에서 리액트가 화면을 조작함
      - (Hydration) - 참고로 이미 렌더링된 HTML과 리액트의 데이터를 연결하는 작업을 Hydration 이라 함

      2. 서버사이드 렌더링 (server-side-rendering)
      - 마찬가지로 렌더링된 HTML을 보내줌
      - 정적 생성이랑 다른 점은 웹 브라우저에서 GET 리퀘스트를 보낼때마다 서버가 매번 렌더링 해서 보내준다는 것임
      시간순으로 확인해보면 웹 브라우저로 접속하면 그때그때 서버가 렌더링해서 HTML을 보내 주고 이미 렌더링된 HTML이기 때문에
      빈 화면이 아니라 렌더링된 화면이 보임 마찬가지로 자바스크립트 로딩이 끝나면 렌더링된 화면이랑 리액트랑 연결하는 작업인 Hydration을 하게 됨

      프리렌더링 장점
      - 초기 속도가 빠름 - 처음부터 HTML이 렌더링된 상태로 제공되기 때문에 JS를 로딩해서 리액트가 완전히 실행될 때까지
      기다리지 않아도 예쁜 화면이 보임
      - 검색 엔진 최적화가 됨 - 검색 엔진에서 제작한 로봇 프로그램들이 사이트를 접속했을 때 텅 빈 HTML이 아니라 렌더링 된 HTML 파일을 받아서
      우리 사이트를 파악할 수 있는 장점이 있음




      렌더링 과정 살펴보기
      - 홈 페이지는 정적생성으로 만들어 놓았긴 때문에 npm run build하면 빌드할 때 미리 만들어 놓은 HTML을 보내 줌
      - Network 탭을 보면 빌드 된 HTML 파일을 그대로 보내 줌
      - 이번에는 상품 상세 페이지를 클릭해 보면 서버 사이드 렌더링을 하도록 구현했음 그렇기 때문에 HTML을 렌더링해서 보내 줄 것 같음
      - 그런데 막상 보면 (숫자.json?id=숫자) HTML을 받아오는게 아니라 json파일을 추가로 받음 그리고 이 파일에는 props만 있음
      - Next.js가 알아서 최적화를 해놓은 거임 굳이 HTML을 새로 받아 오지 않고 필요한 데이터만 받아 온 거임
      - 더 정확히는 우리가 구현한 getSeverSideProps를 실행해서 props를 만들면 이걸 보내주는 거임
      - 조금더 자세히 보면 Network 탭을보면 (%5Bid) 어쩌구 하는 JS 파일이 있음
      - 사실 HTML 대신에 JS파일을 받아오는데 이건 우리가 구현한 페이지의 JS 코드임 (페이지에 해당하는 JS 코드만 받아온거임)
      - Next.js는 화면에 링크가 보이면 링크를 클릭하기 전에 필요한 JS만 미리 다운받음
      - 이렇게 필요한 파일들만 분리해 놓은것을 - (코드 스플리팅) 이라함
      - Next.js에서는 기본적으로 모든 페이지를 따로따로 코드 스플리팅 해줌
      - 사이트에 접속하면 전부 다 새로 렌더링 하는 것 보다 일부 데이터와 일부 컴포넌트만 바꿔서 보여주는게 더 효율적임
      - 즉 서버사이드 렌더링으로 페이지를 구현하더라도 처음 사이트에 접속할 때는 pre-rendering된 HTML을 받아서 보여주지만
      - Next.js에서 제공하는 Link 컴포넌트로 이동하는 경우에는 최적화가 되어있기 때문에 필요한 JS코드랑
      - json 데이터만 받아서 화면에 렌더링하는 거임

      결론
      - Next.js에서는 맨 처음 접속했을때는 프리렌더링된 HTML을 전부 보내주고 적절한 타이밍에 코드 스플링된 JS를
      - 몰래 받아서 리액트에서 실행하고 링크를 클릭하면 필요한 데이터를 json파일로 받아와서 화면을 업데이트함



      서버사이드 렌더링을 고려하면 좋은 경우
      - 이럴 때 서버사이드 렌더링을 고려해 보자
      - 항상 최신 데이터를 보여 줘야 하는 경우
      - 데이터가 자주 바뀌는 경우
      - 리퀘스트의 데이터를 사용해야 하는 경우 (예: 헤더, 쿼리스트링, 쿠키 등)
      - 그 외에 특별한 이유가 없다면 되도록 정적 생성을 하는 걸 권장합니다.
    </div>
  );
}
