export default function Study() {
  return (
    <div>
      <h1>프리렌더링 - 웹페이지 로딩 이전에 하는 렌더링</h1>

      CSR은 사이트에 접속하면 처음엔 빈 화면이 나옴 - 텅 빈 HTML 코드를 보내 주기 때문임 필요한 자바스크립트를 전부 로딩하면
      리액트가 실행되고 렌더링을 해서 제대로 된 화면이 보임

      여기서 프리렌더링은 언제 일어날까? - 처음에 브라우저가 HTML을 받아오는 시점이 시간상으로 이 시점 이전이 프리렌더링이 
      일어나는 시점임 웹 브라우저가 HTML 코드를 받아오기 이전에 렌더링 하는 거임

      프리 렌더링 2가지 방식 -  정적 생성(static generation), 서버사이드 렌더링(server-side-rendering)
      1. 정적 생성 (static generation)
      - 빌드를 하는 시점에 렌더링 하는 거임 , 빌드는 배포 하기전에 소스코드를 실행할 수 있는 형태로 만들어 놓는 것
      - 정적 생성은 쉽게 말해서 빌드할 때 HTML을 만드는 거임
      - 소스 코드를 빌드하면서 파일로 미리 만들어 두었다가 웹 브라우저로 접속하면 만들어 놓은걸 그대로 보여줌
      이미 렌더링된 HTML을 받는거니까 렌더링된 화면을 곧바로 보여줄 수 있음 이렇게 렌더링된 상태에서 JS 파일을 로딩하고
      리액트를 실행하면 이미 화면에 렌더링된 것들이랑 리액트랑 연결해서 다음부터는 클라이언트 사이드에서 리액트가 화면을 조작함
      - (Hydration) - 참고로 이미 렌더링된 HTML과 리액트의 데이터를 연결하는 작업을 Hydration 이라 함

      2. 서버사이드 렌더링 (server-side-rendering)
      - 마찬가지로 렌더링된 HTML을 보내줌
      - 정적 생성이랑 다른 점은 웹 브라우저에서 GET 리퀘스트를 보낼때마다 서버가 매번 렌더링 해서 보내준다는 것임
      시간순으로 확인해보면 웹 브라우저로 접속하면 그때그때 서버가 렌더링해서 HTML을 보내 주고 이미 렌더링된 HTML이기 때문에
      빈 화면이 아니라 렌더링된 화면이 보임 마찬가지로 자바스크립트 로딩이 끝나면 렌더링된 화면이랑 리액트랑 연결하는 작업인 Hydration을 하게 됨

      프리렌더링 장점
      - 초기 속도가 빠름 - 처음부터 HTML이 렌더링된 상태로 제공되기 때문에 JS를 로딩해서 리액트가 완전히 실행될 때까지
      기다리지 않아도 예쁜 화면이 보임
      - 검색 엔진 최적화가 됨 - 검색 엔진에서 제작한 로봇 프로그램들이 사이트를 접속했을 때 텅 빈 HTML이 아니라 렌더링 된 HTML 파일을 받아서
      우리 사이트를 파악할 수 있는 장점이 있음
    </div>
  );
}
